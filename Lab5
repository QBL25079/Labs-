package main

import (
	"container/heap"
	"fmt"
)

// 1. Алгоритмы поиска подстроки
func naiveSearch(text, pattern string) []int {
	var result []int
	n := len(text)
	m := len(pattern)

	for i := 0; i <= n-m; i++ {
		j := 0
		for j < m && text[i+j] == pattern[j] {
			j++
		}
		if j == m {
			result = append(result, i)
		}
	}
	return result
}

func computeLPS(pattern string) []int {
	m := len(pattern)
	lps := make([]int, m)
	length := 0

	for i := 1; i < m; {
		if pattern[i] == pattern[length] {
			length++
			lps[i] = length
			i++
		} else {
			if length != 0 {
				length = lps[length-1]
			} else {
				lps[i] = 0
				i++
			}
		}
	}
	return lps
}

func kmpSearch(text, pattern string) []int {
	var result []int
	n := len(text)
	m := len(pattern)
	lps := computeLPS(pattern)

	i, j := 0, 0
	for i < n {
		if pattern[j] == text[i] {
			i++
			j++
		}
		if j == m {
			result = append(result, i-j)
			j = lps[j-1]
		} else if i < n && pattern[j] != text[i] {
			if j != 0 {
				j = lps[j-1]
			} else {
				i++
			}
		}
	}
	return result
}

// 2. Поиск палиндромов
func findAllPalindromes(s string) []string {
	n := len(s)
	result := make([]string, 0)

	expand := func(l, r int) {
		for l >= 0 && r < n && s[l] == s[r] {
			result = append(result, s[l:r+1])
			l--
			r++
		}
	}

	for i := 0; i < n; i++ {
		expand(i, i)   // Нечетные
		expand(i, i+1) // Четные
	}

	return result
}

// 3. Кодирование Хаффмана
type Node struct {
	char  rune
	freq  int
	left  *Node
	right *Node
}

type PriorityQueue []*Node

func (pq PriorityQueue) Len() int            { return len(pq) }
func (pq PriorityQueue) Less(i, j int) bool  { return pq[i].freq < pq[j].freq }
func (pq PriorityQueue) Swap(i, j int)       { pq[i], pq[j] = pq[j], pq[i] }
func (pq *PriorityQueue) Push(x interface{}) { *pq = append(*pq, x.(*Node)) }
func (pq *PriorityQueue) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	*pq = old[0 : n-1]
	return item
}

func buildHuffmanTree(text string) *Node {
	freq := make(map[rune]int)
	for _, c := range text {
		freq[c]++
	}

	pq := make(PriorityQueue, 0)
	for char, count := range freq {
		pq = append(pq, &Node{char: char, freq: count})
	}
	heap.Init(&pq)

	for pq.Len() > 1 {
		left := heap.Pop(&pq).(*Node)
		right := heap.Pop(&pq).(*Node)

		parent := &Node{
			freq:  left.freq + right.freq,
			left:  left,
			right: right,
		}
		heap.Push(&pq, parent)
	}

	return heap.Pop(&pq).(*Node)
}

func buildCodes(root *Node, code string, codes map[rune]string) {
	if root == nil {
		return
	}
	if root.char != 0 {
		codes[root.char] = code
		return
	}
	buildCodes(root.left, code+"0", codes)
	buildCodes(root.right, code+"1", codes)
}

func huffmanEncode(text string) (string, map[rune]string) {
	if len(text) == 0 {
		return "", nil
	}

	root := buildHuffmanTree(text)
	codes := make(map[rune]string)
	buildCodes(root, "", codes)

	encoded := ""
	for _, c := range text {
		encoded += codes[c]
	}

	return encoded, codes
}

// 4. Обнаружение циклов в графе
type Graph struct {
	vertices int
	adj      [][]int
}

func NewGraph(v int) *Graph {
	return &Graph{
		vertices: v,
		adj:      make([][]int, v),
	}
}

func (g *Graph) AddEdge(v, w int) {
	g.adj[v] = append(g.adj[v], w)
}

func (g *Graph) isCyclic() bool {
	visited := make([]bool, g.vertices)
	recStack := make([]bool, g.vertices)

	for i := 0; i < g.vertices; i++ {
		if g.isCyclicUtil(i, visited, recStack) {
			return true
		}
	}
	return false
}

func (g *Graph) isCyclicUtil(v int, visited, recStack []bool) bool {
	if !visited[v] {
		visited[v] = true
		recStack[v] = true

		for _, neighbor := range g.adj[v] {
			if !visited[neighbor] && g.isCyclicUtil(neighbor, visited, recStack) {
				return true
			} else if recStack[neighbor] {
				return true
			}
		}
	}
	recStack[v] = false
	return false
}

func main() {
	for {
		fmt.Println("\nВыберите алгоритм:")
		fmt.Println("1. Поиск подстроки (Наивный и КМП)")
		fmt.Println("2. Поиск всех палиндромных подстрок")
		fmt.Println("3. Кодирование Хаффмана")
		fmt.Println("4. Обнаружение циклов в графе")
		fmt.Println("0. Выход")

		var choice int
		fmt.Print("> ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			text := "ABABDABACDABABCABAB"
			pattern := "ABABCABAB"
			fmt.Println("\nТекст:", text)
			fmt.Println("Образец:", pattern)
			fmt.Println("Наивный алгоритм:", naiveSearch(text, pattern))
			fmt.Println("Алгоритм КМП:", kmpSearch(text, pattern))

		case 2:
			s := "abbaabcb"
			fmt.Println("\nСтрока:", s)
			fmt.Println("Палиндромы:", findAllPalindromes(s))

		case 3:
			text := "this is an example for huffman encoding"
			encoded, codes := huffmanEncode(text)
			fmt.Println("\nИсходный текст:", text)
			fmt.Println("Закодированный текст:", encoded)
			fmt.Println("Коды символов:")
			for char, code := range codes {
				fmt.Printf("'%c': %s\n", char, code)
			}

		case 4:
			g := NewGraph(4)
			g.AddEdge(0, 1)
			g.AddEdge(0, 2)
			g.AddEdge(1, 2)
			g.AddEdge(2, 0)
			g.AddEdge(2, 3)
			g.AddEdge(3, 3)

			if g.isCyclic() {
				fmt.Println("\nГраф содержит цикл")
			} else {
				fmt.Println("\nГраф не содержит циклов")
			}

		case 0:
			fmt.Println("Выход...")
			return

		default:
			fmt.Println("Неверный выбор")
		}
	}
}
